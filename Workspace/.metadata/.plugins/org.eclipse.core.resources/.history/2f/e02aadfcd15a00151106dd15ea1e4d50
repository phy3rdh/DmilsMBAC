/*
 * [The "BSD license"]
 * Copyright (c) 2011, abego Software GmbH, Germany (http://www.abego.org)
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the abego Software GmbH nor the names of its 
 *    contributors may be used to endorse or promote products derived from this 
 *    software without specific prior written permission.
 *    
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */
package org.abego.treelayout.demo;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.abego.treelayout.TreeForTreeLayout;
import org.abego.treelayout.util.DefaultTreeForTreeLayout;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;


//creates trees from a formatted GSNML file (of the form <node id="x" parentID="y">)
/**
 * creates GSN tree models from a formatted GSNML file
 * The GSNML file must have been pre-formatted as an XML file called "formattedGSNML.xml" of the following structure
 * 
 * <?xml version="1.0"?>
	<argumentTree>
		<node id="x" parentID="y"></node>
	</argumentTree>
 * 
 * These XML files can be created from the GSNML file using the program gsnmlFormatForTree.eol
 * 
 * @author Richard Hawkins (richard.hawkins@york.ac.uk)
 */

public class GSNTreeFactory {

	//read in all the elements of the GSNML file using DOM
	
	


	
	public static TreeForTreeLayout<TextInBox> createGSNTree() throws SAXException, IOException, ParserConfigurationException {
		
		//read in all the elements of the GSNML file using DOM
		
		File fXmlFile = new File("formattedGSNML.xml");
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = dBuilder.parse(fXmlFile);
				
		doc.getDocumentElement().normalize();
		
		NodeList nList = doc.getElementsByTagName("node");
		
		
		/*Firstly create an XML file using the GSNML file of the form 
		 * <node id="x" parentID="y">
		 * 
		 * for each element of this XML file create a tree node
		 * 
		 * for( all elements)
		 * TextInBox id = new TextInBox(id, 100, 50);
		 
		 */
		
	    
			TextInBox[] textInBoxes = new TextInBox[nList.getLength()];

	        for(int i=0; i<nList.getLength(); i++){
	        	 Node nNode = nList.item(i);
				 Element eElement = (Element) nNode;
			    String id=eElement.getAttribute("id");
			    //System.out.println(id);
			    //if the id is long or contains an _ then add in a line break. 
			    //This helps the formatting of the diagram
			    
			    if(id.contains("_")){
			    	id=id.replace("_", "\n_");
			    	System.out.println("replaced id: "+id);
			    }
			    
			    if(id.length()>40){
			    	String id1=id.substring(0, 39);
			    	String id2=id.substring(40);
			    	id=id1.concat("\n").concat(id2);
			    }
			    
	            textInBoxes[i] = new TextInBox(id, 150, 50);
	        }
		
		
		/*
		 * find the id of the root node (parentID=null)
		
	        
	       String rootID = null;
	       TextInBox root = null;
	       TextInBox parentNode = null;
	       TextInBox node;
	       
	       for(int i=0; i<44; i++){
	        	 Node nNode = nList.item(i);
				 Element eElement = (Element) nNode;
			    String parent=eElement.getAttribute("parentID");
			    System.out.println("parent: "+parent);
			    if(parent=="null"){
			    	System.out.println("flag ");
			    	rootID=eElement.getElementsByTagName("id").item(0).getTextContent();
			    	System.out.println("rootID: "+rootID);
			    }
	       }
		
	       //find the TextInBox object that has that ID
	       for(int i=0; i<44; i++){
	    	   if(textInBoxes[i].text==rootID){
	    		  root=textInBoxes[i];
	    		  System.out.println("root: "+root.toString());
	    	   }
	       }
	       */
	      
	        //set the root node to be the first node in the file
	        
	        TextInBox root=textInBoxes[0];
	        TextInBox node;
	        TextInBox parentNode = null;
	        
		DefaultTreeForTreeLayout<TextInBox> tree = new DefaultTreeForTreeLayout<TextInBox>(
				root);
		
		/*
		 * for(all remaining elements)
		 * tree.addChild(y, x);
		 */
		
		for(int i=1; i<nList.getLength(); i++){
			node=textInBoxes[i];
			Node nNode = nList.item(i);
			 Element eElement = (Element) nNode;
		    String parentID=eElement.getAttribute("parentID");
		    String nodeID=eElement.getAttribute("id");
		    System.out.println(nodeID);
		    
		    for(int j=0; j<nList.getLength(); j++){
		    	   if(textInBoxes[j].text.equals(parentID)){
		    		  parentNode=textInBoxes[j];  
		    		  System.out.println("Node: " + nodeID + " parentNode: "+parentID);
		    		 System.out.println("j: "+j);
		    		  tree.addChild(parentNode, node);
		    	   }
		    }
		    
		}
		
		return tree;
	}
	
	/**
	 * Returns a "Sample" tree with {@link TextInBox} items as nodes.
	 */
	public static DefaultTreeForTreeLayout<TextInBox> createSampleTree2() {
		TextInBox root = new TextInBox("prog", 40, 20);
		TextInBox n100 = new TextInBox("classDef", 65, 20);
		TextInBox n1_1 = new TextInBox("class", 50, 20);
		TextInBox n1_2 = new TextInBox("T", 20, 20);
		TextInBox n1_3 = new TextInBox("{", 20, 20);
		TextInBox n1_4 = new TextInBox("member", 60, 20);
		TextInBox n1_5 = new TextInBox("member", 60, 20);
		TextInBox n1_5_1 = new TextInBox("<ERROR:int>", 90, 20);
		TextInBox n1_6 = new TextInBox("member", 60, 20);
		TextInBox n1_6_1 = new TextInBox("int", 30, 20);
		TextInBox n1_6_2 = new TextInBox("i", 20, 20);
		TextInBox n1_6_3 = new TextInBox(";", 20, 20);
		TextInBox n1_7 = new TextInBox("}", 20, 20);
		         
		         
		DefaultTreeForTreeLayout<TextInBox> tree = new DefaultTreeForTreeLayout<TextInBox>(
				root);
		tree.addChild(root, n100);
		tree.addChild(n100, n1_1);
		tree.addChild(n100, n1_2);
		tree.addChild(n100, n1_3);
		tree.addChild(n100, n1_4);
		tree.addChild(n100, n1_5);
		tree.addChild(n1_5, n1_5_1);
		tree.addChild(n100, n1_6);
		tree.addChild(n1_6,n1_6_1);
		tree.addChild(n1_6,n1_6_2);
		tree.addChild(n1_6,n1_6_3);
		tree.addChild(n100, n1_7);
		return tree;
	}
}
